import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Definições de parâmetros
ticker = "BBAS3.SA"
start_date = "2010-01-01"
end_date = "2024-11-25"  # Atualize para a data atual

# Baixar os dados históricos
data = yf.download(ticker, start=start_date, end=end_date)

# Adicionar os dividendos ao DataFrame
dividends = yf.Ticker(ticker).dividends
data['Dividendos'] = dividends.reindex(data.index).fillna(0)

# Verificar as primeiras linhas dos dados
print(data.head())

# Função para calcular RSI corretamente utilizando EMA e tratamento de divisão por zero
def calculate_rsi(data, window=14):
    """
    Calcula o Índice de Força Relativa (RSI) utilizando Médias Móveis Exponenciais (EMA).
    
    Parâmetros:
    - data (pd.DataFrame): DataFrame contendo a coluna 'Adj Close'.
    - window (int): Período para o cálculo do RSI. Padrão é 14.
    
    Retorna:
    - pd.Series: Série temporal com os valores do RSI.
    """
    delta = data['Adj Close'].diff()
    
    # Separar ganhos e perdas
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    
    # Calcular médias móveis exponenciais dos ganhos e perdas
    avg_gain = gain.ewm(alpha=1/window, min_periods=window, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/window, min_periods=window, adjust=False).mean()
    
    # Calcular RS (Relative Strength)
    rs = avg_gain / avg_loss
    
    # Calcular RSI
    rsi = 100 - (100 / (1 + rs))
    
    # Tratamento de casos onde avg_loss é zero
    rsi = rsi.where(avg_loss != 0, 100)
    # Tratamento de casos onde avg_gain é zero
    rsi = rsi.where(avg_gain != 0, 0)
    
    return rsi

# Função para calcular MACD
def calculate_macd(data, short_window=12, long_window=26, signal_window=9):
    """
    Calcula o MACD e a Linha de Sinal utilizando Médias Móveis Exponenciais (EMA).
    
    Parâmetros:
    - data (pd.DataFrame): DataFrame contendo a coluna 'Adj Close'.
    - short_window (int): Período da EMA curta. Padrão é 12.
    - long_window (int): Período da EMA longa. Padrão é 26.
    - signal_window (int): Período da EMA da Linha de Sinal. Padrão é 9.
    
    Retorna:
    - macd (pd.Series): Série temporal do MACD.
    - signal (pd.Series): Série temporal da Linha de Sinal.
    """
    ema_short = data['Adj Close'].ewm(span=short_window, adjust=False).mean()
    ema_long = data['Adj Close'].ewm(span=long_window, adjust=False).mean()
    macd = ema_short - ema_long
    signal = macd.ewm(span=signal_window, adjust=False).mean()
    return macd, signal

# Calcular RSI e MACD
data['RSI'] = calculate_rsi(data, window=14)
data['MACD'], data['Signal Line'] = calculate_macd(data)

# Exibir informações do DataFrame
print(data.info())

# Opcional: Visualizar os indicadores junto com o preço
plt.figure(figsize=(14, 10))

# Subgráfico 1: Preço de Fechamento Ajustado
plt.subplot(3, 1, 1)
plt.plot(data.index, data['Adj Close'], label='Preço Ajustado de Fechamento', color='blue')
plt.title(f'Preço Ajustado de Fechamento - {ticker}')
plt.legend()
plt.grid(True)

# Subgráfico 2: RSI
plt.subplot(3, 1, 2)
plt.plot(data.index, data['RSI'], label='RSI', color='orange')
plt.axhline(70, color='red', linestyle='--', label='Sobrecompra (70)')
plt.axhline(30, color='green', linestyle='--', label='Sobrevenda (30)')
plt.title('Índice de Força Relativa (RSI)')
plt.legend()
plt.grid(True)

# Subgráfico 3: MACD e Linha de Sinal
plt.subplot(3, 1, 3)
plt.plot(data.index, data['MACD'], label='MACD', color='purple')
plt.plot(data.index, data['Signal Line'], label='Linha de Sinal', color='green')
plt.title('MACD')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
